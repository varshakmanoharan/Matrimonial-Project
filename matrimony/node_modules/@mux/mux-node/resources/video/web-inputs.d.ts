import * as Core from '@mux/mux-node/core';
import { APIResource } from '@mux/mux-node/resource';
import * as WebInputsAPI from '@mux/mux-node/resources/video/web-inputs';
import { BasePage, type BasePageParams } from '@mux/mux-node/pagination';
export declare class WebInputs extends APIResource {
    /**
     * Create a new Web Input
     */
    create(body: WebInputCreateParams, options?: Core.RequestOptions): Core.APIPromise<WebInputCreateResponse>;
    /**
     * Retrieve a single Web Input's info
     */
    retrieve(webInputId: string, options?: Core.RequestOptions): Core.APIPromise<WebInputRetrieveResponse>;
    /**
     * List Web Inputs
     */
    list(query?: WebInputListParams, options?: Core.RequestOptions): Core.PagePromise<WebInputListResponsesBasePage, WebInputListResponse>;
    list(options?: Core.RequestOptions): Core.PagePromise<WebInputListResponsesBasePage, WebInputListResponse>;
    /**
     * Deletes a Web Input and all its data
     */
    delete(webInputId: string, options?: Core.RequestOptions): Core.APIPromise<void>;
    /**
     * Launches the browsers instance, loads the URL specified, and then starts
     * streaming to the specified Live Stream.
     */
    launch(webInputId: string, options?: Core.RequestOptions): Core.APIPromise<WebInputLaunchResponse>;
    /**
     * Reloads the page that a Web Input is displaying.
     *
     * Note: Using this when the Web Input is streaming will display the page
     * reloading.
     */
    reload(webInputId: string, options?: Core.RequestOptions): Core.APIPromise<WebInputReloadResponse>;
    /**
     * Ends streaming to the specified Live Stream, and then shuts down the Web Input
     * browser instance.
     */
    shutdown(webInputId: string, options?: Core.RequestOptions): Core.APIPromise<WebInputShutdownResponse>;
    /**
     * Changes the URL that a Web Input loads when it launches.
     *
     * Note: This can only be called when the Web Input is idle.
     */
    updateURL(webInputId: string, body: WebInputUpdateURLParams, options?: Core.RequestOptions): Core.APIPromise<WebInputUpdateURLResponse>;
}
export declare class WebInputListResponsesBasePage extends BasePage<WebInputListResponse> {
}
export interface WebInputCreateResponse {
    /**
     * Unique identifier for the Web Input.
     */
    id: string;
    /**
     * When set to `true` the Web Input will automatically launch and start streaming
     * immediately after creation
     */
    auto_launch: boolean;
    /**
     * Time the Web Input was created, defined as a Unix timestamp (seconds since
     * epoch).
     */
    created_at: string;
    /**
     * The Live Stream ID to broadcast this Web Input to
     */
    live_stream_id: string;
    /**
     * The resolution of the viewport of the Web Input's browser instance. Defaults to
     * 1920x1080 if not set.
     */
    resolution: '1920x1080' | '1280x720' | '1080x1920' | '720x1280' | '1080x1080' | '720x720';
    status: 'idle' | 'launching' | 'streaming';
    /**
     * The URL for the Web Input to load.
     */
    url: string;
    /**
     * Arbitrary metadata that will be included in the Web Input details and related
     * webhooks. Can be used to store your own ID for the Web Input. **Max: 255
     * characters**.
     */
    passthrough?: string;
    /**
     * The number of seconds that the Web Input should stream for before automatically
     * shutting down.
     */
    timeout?: number;
}
export interface WebInputRetrieveResponse {
    /**
     * Unique identifier for the Web Input.
     */
    id: string;
    /**
     * When set to `true` the Web Input will automatically launch and start streaming
     * immediately after creation
     */
    auto_launch: boolean;
    /**
     * Time the Web Input was created, defined as a Unix timestamp (seconds since
     * epoch).
     */
    created_at: string;
    /**
     * The Live Stream ID to broadcast this Web Input to
     */
    live_stream_id: string;
    /**
     * The resolution of the viewport of the Web Input's browser instance. Defaults to
     * 1920x1080 if not set.
     */
    resolution: '1920x1080' | '1280x720' | '1080x1920' | '720x1280' | '1080x1080' | '720x720';
    status: 'idle' | 'launching' | 'streaming';
    /**
     * The URL for the Web Input to load.
     */
    url: string;
    /**
     * Arbitrary metadata that will be included in the Web Input details and related
     * webhooks. Can be used to store your own ID for the Web Input. **Max: 255
     * characters**.
     */
    passthrough?: string;
    /**
     * The number of seconds that the Web Input should stream for before automatically
     * shutting down.
     */
    timeout?: number;
}
export interface WebInputListResponse {
    /**
     * Unique identifier for the Web Input.
     */
    id: string;
    /**
     * When set to `true` the Web Input will automatically launch and start streaming
     * immediately after creation
     */
    auto_launch: boolean;
    /**
     * Time the Web Input was created, defined as a Unix timestamp (seconds since
     * epoch).
     */
    created_at: string;
    /**
     * The Live Stream ID to broadcast this Web Input to
     */
    live_stream_id: string;
    /**
     * The resolution of the viewport of the Web Input's browser instance. Defaults to
     * 1920x1080 if not set.
     */
    resolution: '1920x1080' | '1280x720' | '1080x1920' | '720x1280' | '1080x1080' | '720x720';
    status: 'idle' | 'launching' | 'streaming';
    /**
     * The URL for the Web Input to load.
     */
    url: string;
    /**
     * Arbitrary metadata that will be included in the Web Input details and related
     * webhooks. Can be used to store your own ID for the Web Input. **Max: 255
     * characters**.
     */
    passthrough?: string;
    /**
     * The number of seconds that the Web Input should stream for before automatically
     * shutting down.
     */
    timeout?: number;
}
export type WebInputLaunchResponse = unknown;
export type WebInputReloadResponse = unknown;
export type WebInputShutdownResponse = unknown;
export interface WebInputUpdateURLResponse {
    /**
     * Unique identifier for the Web Input.
     */
    id: string;
    /**
     * When set to `true` the Web Input will automatically launch and start streaming
     * immediately after creation
     */
    auto_launch: boolean;
    /**
     * Time the Web Input was created, defined as a Unix timestamp (seconds since
     * epoch).
     */
    created_at: string;
    /**
     * The Live Stream ID to broadcast this Web Input to
     */
    live_stream_id: string;
    /**
     * The resolution of the viewport of the Web Input's browser instance. Defaults to
     * 1920x1080 if not set.
     */
    resolution: '1920x1080' | '1280x720' | '1080x1920' | '720x1280' | '1080x1080' | '720x720';
    status: 'idle' | 'launching' | 'streaming';
    /**
     * The URL for the Web Input to load.
     */
    url: string;
    /**
     * Arbitrary metadata that will be included in the Web Input details and related
     * webhooks. Can be used to store your own ID for the Web Input. **Max: 255
     * characters**.
     */
    passthrough?: string;
    /**
     * The number of seconds that the Web Input should stream for before automatically
     * shutting down.
     */
    timeout?: number;
}
export interface WebInputCreateParams {
    /**
     * The Live Stream ID to broadcast this Web Input to
     */
    live_stream_id: string;
    /**
     * The URL for the Web Input to load.
     */
    url: string;
    /**
     * Unique identifier for the Web Input.
     */
    id?: string;
    /**
     * When set to `true` the Web Input will automatically launch and start streaming
     * immediately after creation
     */
    auto_launch?: boolean;
    /**
     * Time the Web Input was created, defined as a Unix timestamp (seconds since
     * epoch).
     */
    created_at?: string;
    /**
     * Arbitrary metadata that will be included in the Web Input details and related
     * webhooks. Can be used to store your own ID for the Web Input. **Max: 255
     * characters**.
     */
    passthrough?: string;
    /**
     * The resolution of the viewport of the Web Input's browser instance. Defaults to
     * 1920x1080 if not set.
     */
    resolution?: '1920x1080' | '1280x720' | '1080x1920' | '720x1280' | '1080x1080' | '720x720';
    status?: 'idle' | 'launching' | 'streaming';
    /**
     * The number of seconds that the Web Input should stream for before automatically
     * shutting down.
     */
    timeout?: number;
}
export interface WebInputListParams extends BasePageParams {
}
export interface WebInputUpdateURLParams {
    /**
     * The URL for the Web Input to load.
     */
    url: string;
}
export declare namespace WebInputs {
    export import WebInputCreateResponse = WebInputsAPI.WebInputCreateResponse;
    export import WebInputRetrieveResponse = WebInputsAPI.WebInputRetrieveResponse;
    export import WebInputListResponse = WebInputsAPI.WebInputListResponse;
    export import WebInputLaunchResponse = WebInputsAPI.WebInputLaunchResponse;
    export import WebInputReloadResponse = WebInputsAPI.WebInputReloadResponse;
    export import WebInputShutdownResponse = WebInputsAPI.WebInputShutdownResponse;
    export import WebInputUpdateURLResponse = WebInputsAPI.WebInputUpdateURLResponse;
    export import WebInputListResponsesBasePage = WebInputsAPI.WebInputListResponsesBasePage;
    export import WebInputCreateParams = WebInputsAPI.WebInputCreateParams;
    export import WebInputListParams = WebInputsAPI.WebInputListParams;
    export import WebInputUpdateURLParams = WebInputsAPI.WebInputUpdateURLParams;
}
//# sourceMappingURL=web-inputs.d.ts.map