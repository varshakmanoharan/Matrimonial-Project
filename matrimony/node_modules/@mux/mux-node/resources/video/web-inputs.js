"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebInputListResponsesBasePage = exports.WebInputs = void 0;
const resource_1 = require("@mux/mux-node/resource");
const core_1 = require("@mux/mux-node/core");
const WebInputsAPI = __importStar(require("@mux/mux-node/resources/video/web-inputs"));
const pagination_1 = require("@mux/mux-node/pagination");
class WebInputs extends resource_1.APIResource {
    /**
     * Create a new Web Input
     */
    create(body, options) {
        return this._client.post('/video/v1/web-inputs', { body, ...options })._thenUnwrap((obj) => obj.data);
    }
    /**
     * Retrieve a single Web Input's info
     */
    retrieve(webInputId, options) {
        return this._client.get(`/video/v1/web-inputs/${webInputId}`, options)._thenUnwrap((obj) => obj.data);
    }
    list(query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/video/v1/web-inputs', WebInputListResponsesBasePage, {
            query,
            ...options,
        });
    }
    /**
     * Deletes a Web Input and all its data
     */
    delete(webInputId, options) {
        return this._client.delete(`/video/v1/web-inputs/${webInputId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Launches the browsers instance, loads the URL specified, and then starts
     * streaming to the specified Live Stream.
     */
    launch(webInputId, options) {
        return this._client.put(`/video/v1/web-inputs/${webInputId}/launch`, options)._thenUnwrap((obj) => obj.data);
    }
    /**
     * Reloads the page that a Web Input is displaying.
     *
     * Note: Using this when the Web Input is streaming will display the page
     * reloading.
     */
    reload(webInputId, options) {
        return this._client.put(`/video/v1/web-inputs/${webInputId}/reload`, options)._thenUnwrap((obj) => obj.data);
    }
    /**
     * Ends streaming to the specified Live Stream, and then shuts down the Web Input
     * browser instance.
     */
    shutdown(webInputId, options) {
        return this._client.put(`/video/v1/web-inputs/${webInputId}/shutdown`, options)._thenUnwrap((obj) => obj.data);
    }
    /**
     * Changes the URL that a Web Input loads when it launches.
     *
     * Note: This can only be called when the Web Input is idle.
     */
    updateURL(webInputId, body, options) {
        return this._client.put(`/video/v1/web-inputs/${webInputId}/url`, { body, ...options })._thenUnwrap((obj) => obj.data);
    }
}
exports.WebInputs = WebInputs;
class WebInputListResponsesBasePage extends pagination_1.BasePage {
}
exports.WebInputListResponsesBasePage = WebInputListResponsesBasePage;
(function (WebInputs) {
    WebInputs.WebInputListResponsesBasePage = WebInputsAPI.WebInputListResponsesBasePage;
})(WebInputs = exports.WebInputs || (exports.WebInputs = {}));
//# sourceMappingURL=web-inputs.js.map